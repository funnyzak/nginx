server {
    listen       80;
    server_name  localhost;

    more_clear_headers Server; 

	server_tokens off;

	proxy_hide_header X-Powered-By;
	proxy_hide_header Server;
    
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload";
    # 防止跨站脚本攻击（XSS）：通过设置HTTP头来防止XSS攻击。
    add_header X-XSS-Protection "1; mode=block"; 
    # 防止跨站请求伪造（CSRF）：通过设置HTTP头来防止CSRF攻击。
    add_header X-CSRF-Token "token";
    add_header X-Content-Type-Options "nosniff";
    # 拒绝iframe
    add_header X-Frame-Options "SAMEORIGIN";

    #charset koi8-r;

    #access_log  logs/host.access.log  main;

    error_page 403 @jump_to_403;
    location @jump_to_403 {
        default_type text/html;
        return 403 '<html><title>403 Forbidden</title><body><h1>403 Forbidden</h1></body></html>';
    }

    error_page 401 @jump_to_401;
    location @jump_to_401 {
        default_type text/html;
        return 401 '<html><title>403 Forbidden</title><body><h1>401 Forbidden</h1></body></html>';
    }

    error_page 404 @jump_to_404;
    location @jump_to_404 {
        default_type text/html;
        return 404 '<html><title>404 Not Found</title><body><h1>Not Found</h1></body></html>';
    }

    error_page 500 502 503 504 @jump_to_error;
    location @jump_to_error {
        default_type text/html;
        return 500 '<html><title>500 Internal Server Error</title><body><h1>500 Internal Server Error</h1></body></html>';
    }

    location / {
        root   html;
        index  index.html index.htm;
    }
    
    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    # error_page   500 502 503 504  /50x.html;
    # location = /50x.html {
    #     root   html;
    # }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


# another virtual host using mix of IP-, name-, and port-based configuration
#
#server {
#    listen       8000;
#    listen       somename:8080;
#    server_name  somename  alias  another.alias;

#    location / {
#        root   html;
#        index  index.html index.htm;
#    }
#}


# HTTPS server
#
#server {
#    listen       443 ssl;
#    server_name  localhost;

#    ssl_certificate      cert.pem;
#    ssl_certificate_key  cert.key;

#    ssl_session_cache    shared:SSL:1m;
#    ssl_session_timeout  5m;

#    ssl_ciphers  HIGH:!aNULL:!MD5;
#    ssl_prefer_server_ciphers  on;

#    location / {
#        root   html;
#        index  index.html index.htm;
#    }
#}

# server {
#     listen       80;
#     server_name  localhost;

#     client_max_body_size 30M;
#     client_body_timeout 60s;
#     keepalive_timeout  60s;

#     proxy_connect_timeout  60s; #nginx跟后端服务器连接超时时间(代理连接超时)
#     proxy_send_timeout  60s; #后端服务器数据回传时间(代理发送超时)
#     proxy_read_timeout  60s; #连接成功后，后端服务器响应时间(代理接收超时)

#     fastcgi_connect_timeout 60s; #指定nginx与后端fastcgi server连接超时时间
#     fastcgi_send_timeout 60s; #指定nginx向后端传送请求超时时间（指已完成两次握手后向fastcgi传送请求超时时间）
#     fastcgi_read_timeout 60s; #指定nginx向后端传送响应超时时间（指已完成两次握手后向fastcgi传送响应超时时间）

#     proxy_ignore_client_abort on; # 忽略客户端中断

#     # host、ip
#     proxy_set_header Host $host;
#     proxy_set_header X-Real-Ip $remote_addr;
#     proxy_set_header X-Forwarded-For $remote_addr;

#     # 允许下划线Header
#     underscores_in_headers on;

# 		# 日志设置
#     log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
#                       '$status $body_bytes_sent "$http_referer" '
#                       '"$http_user_agent" "$http_x_forwarded_for"';
#     access_log  /var/log/nginx/access.log  main;

# 		# 映射静态文件
#     location /data/attachment/ {
#         # cors
#         add_header 'Access-Control-Allow-Origin' '$http_origin' always;
#         # 允许request method
#         add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE, PUT';
#         add_header 'Access-Control-Allow-Credentials' 'true';
# 				# 允许请求头
#         add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization,x-auth-token';

#         root /;
#         index index.html;

# 				# 拒绝外部直接访问
# 		    allow 127.0.0.0/8;
# 		    deny all;
#     }
# }


# server {  
#     listen         80;
#     server_name    domain.com www.domain.com;
#     rewrite ^(.*)  https://$server_name$1 permanent;
# }

# server {
#   # 以下两种写法，效果是一样的。
#   location / {
#     proxy_pass http://ent.163.com/ ;
#   }

#   location / {
#     proxy_pass http://ent.163.com ;
#   }

#   # 当访问 http://abc.163.com/star/ 的时候，nginx 会代理访问到 http://ent.163.com/star/ ，并返回给我们。
#   location /star/ {
#     proxy_pass http://ent.163.com ;
#   }

#   # 当访问 http://abc.163.com/star/ 的时候，nginx 会代理访问到 http://ent.163.com/ ，并返回给我们。
#   location /star/ {
#     proxy_pass http://ent.163.com/ ;
#   }
# }


# server {
#     root /home/www;

#     location / {
#         # 重写规则信息
#         error_log logs/rewrite.log notice; 
#         # 注意这里要用‘’单引号引起来，避免{}
#         rewrite '^/images/([a-z]{2})/([a-z0-9]{5})/(.*)\.(png|jpg|gif)$' /data?file=$3.$4;
#         # 注意不能在上面这条规则后面加上“last”参数，否则下面的set指令不会执行
#         set $image_file $3;
#         set $image_type $4;
#     }

#     location /data {
#         # 指定针对图片的日志格式，来分析图片类型和大小
#         access_log logs/images.log mian;
#         root /data/images;
#         # 应用前面定义的变量。判断首先文件在不在，不在再判断目录在不在，如果还不在就跳转到最后一个url里
#         try_files /$arg_file /image404.html;
#     }
#     location = /image404.html {
#         # 图片不存在返回特定的信息
#         return 404 "image not found\n";
#     }
# }


# server {
#     # 缩略图
#     location /image_filter {
#         # 源图所在路径
#         alias /;

#         image_filter resize $arg_width $arg_height;
#         image_filter crop $arg_width $arg_height;
#         image_filter rotate $arg_rotate;
#         image_filter_buffer 300M;
#         image_filter_jpeg_quality $arg_quality;

#         access_log off;
#     }

#     location ~* (.*)_thumb_(\d+)x(\d+)_(\d+)_(\d+)\.(png|jpg|jpeg|bmp)$ {
#         #缓存路径
#         root /data/attachment/img_cache; 

#         # 缓存配置
#         proxy_store on;
#         proxy_temp_path /data/attachment/img_cache;
#         proxy_store_access user:rw group:rw all:r;
#         proxy_set_header Host $host;
#         access_log on;

#         set $path     $1; # 原始路径，不包含后缀
#         set $width    $2; # 宽度
#         set $height   $3; # 高度
#         set $rotate   $4; # 旋转
#         set $quality  $5; # 压缩质量
#         set $suffix   $6; # 后缀

#         set $image_path $path.$suffix;
#         set $filter_image_uri image_filter/$image_path?width=$width&height=$height&rotate=$rotate&quality=$quality;

#         if (!-f $request_filename) {
#             # 图片不存在则方向代理
#             proxy_pass http://127.0.0.1:80/$filter_image_uri;
#             break;
#         }
#     }
# }